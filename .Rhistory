plot(x = Wage$age, y = I(Wage$wage > 250), xlin = c(min(age.grid),
max(age.grid)), type = "n", ylim = c(0, 0.2), xlab = "Age", ylab = "Wage > 250k")
points(jitter(Wage$age), I((Wage$wage > 250)/5), cex = 0.5, pch = "|",
col = "darkgrey")
lines(age.grid, preds$fit, lwd = 2, col = "blue")
# Plot the result
plot(x = Wage$age, y = I(Wage$wage > 250), xlim = c(min(age.grid),
max(age.grid)), type = "n", ylim = c(0, 0.2), xlab = "Age", ylab = "Wage > 250k")
points(jitter(Wage$age), I((Wage$wage > 250)/5), cex = 0.5, pch = "|",
col = "darkgrey")
lines(age.grid, preds$fit, lwd = 2, col = "blue")
# Plot the result
plot(x = Wage$age, y = I(Wage$wage > 250), xlim = c(min(age.grid),
max(age.grid)), type = "n", ylim = c(0, 0.2), xlab = "Age", ylab = "Wage > 250k")
points(jitter(Wage$age), I((Wage$wage > 250)/5), cex = 0.5, pch = "|",
col = "darkgrey")
lines(age.grid, preds$fit, lwd = 2, col = "blue")
matlines(age.grid, se.bands, lwd = 1, col = "blue", lty = 3)
# Fit a step function to the data
table(cut(Wage$age, 4))
# Fit a step function to the data
table(cut(Wage$age, 4))
cut.fit <-  lm(wage ~ cut(age, 4), data = Wage)
coef(summary(cut.fit))
cut.pred <- predict(cut.fit, newdata = list(age = age.grid), se = TRUE)
cut.pred <- predict(cut.fit, newdata = list(age = age.grid), se = TRUE)
cut.ses <- cbind(cut.pred$fit + 2*cut.pred$se, cut.pred$fit - 2*cut.pred$se)
# Fit a step function to the data
table(cut(Wage$age, 4))
cut.fit <-  lm(wage ~ cut(age, 4), data = Wage)
coef(summary(cut.fit))
cut.pred <- predict(cut.fit, newdata = list(age = age.grid), se = TRUE)
cut.ses <- cbind(cut.pred$fit + 2*cut.pred$se, cut.pred$fit - 2*cut.pred$se)
par(mar = c(4.5, 4.5, 1, 1), oma = c(0, 0, 4, 0)) # Creates 2 panels in 1 row
# x 2 cols, mar() sets the inner margin and oma sets the outer margin
plot(wage ~ age, data = Wage, xlim = c(min(age.grid), max(age.grid)),
xlab = "Age", ylab = "Wage", cex = 0.5, col = "darkgrey")
title("Step Function Fit", outer = TRUE)
lines(age.grid, cut.pred$fit, lwd = 2, col = "blue")
matlines(age.grid, cut.ses, lwd = 1, col = "blue", lty = 2)
library(splines)
fit = lm(wage ~ bs(age, knots = c(25, 40, 60)), dat = Wage)
pred = predict(fit, newdata = list(age = age.grid), se = T)
plot(age, wage, col = "gray")
lines(age.grid, pred$fit, lwd = 2)
lines(age.grid, pred$fit + 2*pred$se, lty = "dashed")
lines(age.grid, pred$fit - 2*pred$se, lty = "dashed")
library(splines)
fit = lm(wage ~ bs(age, knots = c(25, 40, 60)), dat = Wage)
pred = predict(fit, newdata = list(age = age.grid), se = T)
plot(age, wage, col = "gray")
# ---------------------------- 7.8.2 - Splines -------------------------------#
rm(list = ls())
library(splines)
fit = lm(wage ~ bs(age, knots = c(25, 40, 60)), dat = Wage)
pred = predict(fit, newdata = list(age = age.grid), se = T)
plot(age, wage, col = "gray")
lines(age.grid, pred$fit, lwd = 2)
lines(age.grid, pred$fit + 2*pred$se, lty = "dashed")
lines(age.grid, pred$fit - 2*pred$se, lty = "dashed")
# ---------------------------- 7.8.2 - Splines -------------------------------#
rm(list = ls())
library(splines)
fit = lm(wage ~ bs(age, knots = c(25, 40, 60)), data = Wage)
pred = predict(fit, newdata = list(age = age.grid), se = T)
plot(age, wage, col = "gray")
lines(age.grid, pred$fit, lwd = 2)
lines(age.grid, pred$fit + 2*pred$se, lty = "dashed")
lines(age.grid, pred$fit - 2*pred$se, lty = "dashed")
rm(list = ls())
library(splines)
library(ISLR)
fit = lm(wage ~ bs(age, knots = c(25, 40, 60)), data = Wage)
pred = predict(fit, newdata = list(age = age.grid), se = T)
plot(age, wage, col = "gray")
lines(age.grid, pred$fit, lwd = 2)
lines(age.grid, pred$fit + 2*pred$se, lty = "dashed")
lines(age.grid, pred$fit - 2*pred$se, lty = "dashed")
library(splines)
library(ISLR)
fit = lm(wage ~ bs(age, knots = c(25, 40, 60)), data = Wage)
pred = predict(fit, newdata = list(age = age.grizd), se = TRUE)
library(splines)
library(ISLR)
fit = lm(wage ~ bs(age, knots = c(25, 40, 60)), data = Wage)
pred = predict(fit, newdata = list(age = age.grid), se = TRUE)
plot(age, wage, col = "gray")
library(ISLR) # Load the package as usual
# Fit a polynomial to the wage data
fit <- lm(wage ~ poly(age, 4), data = Wage)
summary(fit)
fit = lm(wage ~ bs(age, knots = c(25, 40, 60)), data = Wage)
pred = predict(fit, newdata = list(age = age.grid), se = TRUE)
fit = lm(wage ~ bs(age, knots = c(25, 40, 60)), data = Wage)
age.grid <- seq(from = range(Wage$age)[1], to = range(Wage$age)[2],
length = 100)
pred = predict(fit, newdata = list(age = age.grid), se = TRUE)
plot(age, wage, col = "gray")
lines(age.grid, pred$fit, lwd = 2)
lines(age.grid, pred$fit + 2*pred$se, lty = "dashed")
lines(age.grid, pred$fit - 2*pred$se, lty = "dashed")
fit = lm(wage ~ bs(age, knots = c(25, 40, 60)), data = Wage)
age.grid=seq (from=agelims [1], to=agelims [2])
fit = lm(wage ~ bs(age, knots = c(25, 40, 60)), data = Wage)
agelims =range(age)
age.grid=seq (from=agelims [1], to=agelims [2])
fit = lm(wage ~ bs(age, knots = c(25, 40, 60)), data = Wage)
agelims = range(age)
fit = lm(wage ~ bs(age, knots = c(25, 40, 60)), data = Wage)
fit <- lm(wage ~ poly(age, 4), data = Wage)
fit = lm(wage ~ bs(age, knots = c(25, 40, 60)), data = Wage)
fit <- lm(wage ~ poly(age, 4), data = Wage)
agelims = range(age)
age.grid = seq (from=agelims [1], to=agelims [2])
pred = predict(fit, newdata = list(age = age.grid), se = TRUE)
exists(age)
exists(age)
exists(age)
exists(age)
exists(age)
exists(age)
exists(age)
age
library(ISLR)
age
library(ISLR) # Load the package as usual
# Fit a polynomial to the wage data
fit <- lm(wage ~ poly(age, 4), data = Wage)
pred = predict(fit, newdata = list(age = age.grid), se = TRUE)
plot(age, wage, col = "gray")
lines(age.grid, pred$fit, lwd = 2)
lines(age.grid, pred$fit + 2*pred$se, lty = "dashed")
lines(age.grid, pred$fit - 2*pred$se, lty = "dashed")
anova(p.mods[[1]], p.mods[[2]], p.mods[[3]], p.mods[[4]], p.mods[[5]])
fit = lm(wage ~ bs(age, knots = c(25, 40, 60)), data = Wage)
pred = predict(fit, newdata = list(age = age.grid), se = TRUE)
plot(wage ~ age, data = Wage, col = "gray")
lines(age.grid, pred$fit, lwd = 2)
lines(age.grid, pred$fit + 2*pred$se, lty = "dashed")
lines(age.grid, pred$fit - 2*pred$se, lty = "dashed")
dim(bs(age, knots = c(25, 40, 60)))
dim(bs(age ~ wage, knots = c(25, 40, 60)))
age <- age ~ wage
dim(bs(age, knots = c(25, 40, 60)))
dim(bs(Wage$age, knots = c(25, 40, 60)))
dim(bs(Wage$age, knots = c(25, 40, 60)))
dim(bs(Wage$age, df = 6), "knots")
dim(bs(Wage$age, df = 6))
attr(bs(Wage$age, df = 6), "knots")
fit2 = lm(wage ~ns(age, df = 4), data = Wage)
fit2 = lm(wage ~ns(age, df = 4), data = Wage)
pred2 = predict(fit2, newdata = list(age = age.grid), se = TRUE)
fit2 = lm(wage ~ns(age, df = 4), data = Wage)
pred2 = predict(fit2, newdata = list(age = age.grid), se = TRUE)
lines(age.grid, pred2$fit, col = "red", lwd = 2)
dim(bs(Wage$age, knots = c(25, 40, 60)))
dim(bs(Wage$age, df = 6))
attr(bs(Wage$age, df = 6), "knots")
fit2 = lm(wage ~ns(age, df = 4), data = Wage)
pred2 = predict(fit2, newdata = list(age = age.grid), se = TRUE)
lines(age.grid, pred2$fit, col = "red", lwd = 2)
plot(age, wage, xlim = agelims, cex 0.5, col = "darkgrey")
agelims = range(age)
agelims = range(wage$age)
agelims = range(Wage$age)
plot(age, wage, xlim = agelims, cex = 0.5, col = "darkgrey")
plot(Wage$age, data = wage, xlim = agelims, cex = 0.5, col = "darkgrey")
plot(wage ~ age, data = Wage, xlim = agelims, cex = 0.5, col = "darkgrey")
fit2 = lm(wage ~ns(age, df = 4), data = Wage)
pred2 = predict(fit2, newdata = list(age = age.grid), se = TRUE)
lines(age.grid, pred2$fit, col = "red", lwd = 2)
plot(wage ~ age, data = Wage, xlim = agelims, cex = 0.5, col = "darkgrey")
plot(wage ~ age, data = Wage, xlim = agelims, cex = 0.5, col = "darkgrey")
title("Smoothing Spline")
fit = smooth.spline(age, wage, df = 16)
fit = smooth.spline(age, data = Wage, df = 16)
fit = smooth.spline(age, Wage, df = 16)
fit = smooth.spline(Wage$age, Wage, df = 16)
fit = smooth.spline(age, wage, df = 16)
fit = smooth.spline(age, wage$wage, df = 16)
fit = smooth.spline(age, wage$wage, df = 16)
fit = smooth.spline(age, wage$Wage, df = 16)
fit = smooth.spline(age, dat = wage, df = 16)
fit = smooth.spline(age, data = wage, df = 16)
fit2$df
fit = smooth.spline(age, Wage$wage, df = 16)
fit = smooth.spline(Wage$age, Wage$wage, df = 16)
fit = smooth.spline(Wage$age, Wage$wage, df = 16)
fit2 = smooth.spline(Wage$age, Wage$wage, cv = TRUE)
fit2$df
plot(wage ~ age, data = Wage, xlim = agelims, cex = 0.5, col = "darkgrey")
title("Smoothing Spline")
fit = smooth.spline(Wage$age, Wage$wage, df = 16)
fit2 = smooth.spline(Wage$age, Wage$wage, cv = TRUE)
fit2$df
lines(fit, col = "red", lwd = 2)
lines(fit2, col = "blue", lwd = 2)
legend("topright", legend = c("16 DF", "6.8 DF"), col = c("red", "blue"),
lty = 1, lwd = 2, cex = 0.8)
plot(Wage$age, Wage$wage, xlim = agelims, cex = 0.5, col = "darkgrey")
title("Local Regression")
fit = loess(wage ~ wage, span = 0.2, data = Wage)
fit = loess(wage ~ age, span = 0.2, data = Wage)
plot(Wage$age, Wage$wage, xlim = agelims, cex = 0.5, col = "darkgrey")
title("Local Regression")
fit = loess(wage ~ age, span = 0.2, data = Wage)
fit2 = loess(wage ~ age, span = 0.5, data = Wage)
lines(age.grid, predict(fit, data.frame(age = age.grid)), col = "red", lwd = 2)
legend("topright", legend = c("Span = 0.2", "Span = 0.5"),
col = c("red", "blue"), lty = 1, lwd = 2, cex = 0.8)
cv.errors <- rep(NA, 10)
for(i in 1:10){
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errors[i] <- cv.glm(Wage, fit)$delta[1]
}
cv.errors <- rep(NA, 10)
for(i in 1:10){
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errors[i] <- cv.glm(Wage$wage, fit)$delta[1]
}
cv.errors <- rep(NA, 10)
for(i in 1:10){
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errors[i] <- cv.glm(wage, fit)$delta[1]
}
cv.errors <- rep(NA, 10)
for(i in 1:10){
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errors[i] <- cv.glm(wage, fit)$delta[1]
}
cv.errors <- rep(NA, 10)
for(i in 1:10){
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errors[i] <- cv.glm(wage, fit)$delta[1]
}
cv.errors <- rep(NA, 10)
for(i in 1:10){
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errors[i] <- cv.glm(wage, fit)$delta[1]
}
wage
Wage
Wage$wage
wage$Wage
rm(list = ls())
library(ISLR)
library(boot)
set.seed(1)
cv.errors <- rep(NA, 10)
for(i in 1:10){
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errors[i] <- cv.glm(wage, fit)$delta[1]
}
cv.errors <- rep(NA, 10)
for(i in 1:10){
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errors[i] <- cv.glm(Wage, fit)$delta[1]
}
plot(1:degree, cv.errors, xlab = "Degree", ylab = "Test MSE", type = "1")
deg.min <- which.min(cv.errors)
points(deg.min, cv.errors[deg.min], col = "blue", cex = 2, pch = 19)
plot(1:degree, cv.errors, xlab = 'degree', ylab = 'Test MSE', type = '1')
deg.min <- which.min(cv.errors)
points(deg.min, cv.errors[deg.min], col = "blue", cex = 2, pch = 19)
plot(1:degree, cv.errors, xlab = 'degree', ylab = 'Test MSE', type = 'l')
deg.min <- which.min(cv.errors)
points(deg.min, cv.errors[deg.min], col = "blue", cex = 2, pch = 19)
plot(1:degree, cv.errors, xlab = 'degree', ylab = 'Test MSE', type = 'l')
deg.min <- which.min(cv.errors)
points(deg.min, cv.errors[deg.min], col = "blue", cex = 2, pch = 19)
plot(1:degree, cv.errors, xlab = 'degree', ylab = 'Test MSE', type = 'l')
deg.min <- which.min(cv.errors)
points(deg.min, cv.errors[deg.min], col = "blue", cex = 2, pch = 19)
plot(1:degree, cv.errors, xlab = , ylab = 'Test MSE', type = '1')
deg.min <- which.min(cv.errors)
points(deg.min, cv.errors[deg.min], col = "blue", cex = 2, pch = 19)
rm(list = ls())
library(ISLR)
library(boot)
set.seed(1)
cv.errors <- rep(NA, 10)
for(i in 1:10){
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errors[i] <- cv.glm(Wage, fit)$delta[1]
}
plot(1:degree, cv.errors, xlab = , ylab = 'Test MSE', type = '1')
deg.min <- which.min(cv.errors)
points(deg.min, cv.errors[deg.min], col = "blue", cex = 2, pch = 19)
library(ISLR)
library(boot)
set.seed(1)
degree <- 10
cv.errs <- rep(NA, degree)
for (i in 1:degree) {
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errs[i] <- cv.glm(Wage, fit)$delta[1]
}
plot(1:degree, cv.errs, xlab = 'Degree', ylab = 'Test MSE', type = 'l')
deg.min <- which.min(cv.errs)
points(deg.min, cv.errs[deg.min], col = 'red', cex = 2, pch = 19)
rm(list = ls())
library(ISLR)
library(boot)
set.seed(1)
degree <- 10
cv.errs <- rep(NA, degree)
for (i in 1:degree) {
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errs[i] <- cv.glm(Wage, fit)$delta[1]
}
plot(1:degree, cv.errs, xlab = 'Degree', ylab = 'Test MSE', type = 'l')
deg.min <- which.min(cv.errs)
points(deg.min, cv.errs[deg.min], col = 'red', cex = 2, pch = 19)
library(ISLR)
library(boot)
plot(1:degree, cv.errs, xlab = 'Degree', ylab = 'Test MSE', type = 'l')
deg.min <- which.min(cv.errs)
points(deg.min, cv.errs[deg.min], col = 'red', cex = 2, pch = 19)
rm(list = ls())
library(ISLR)
library(boot)
set.seed(1)
degree <- 10
cv.errs <- rep(NA, degree)
for (i in 1:degree) {
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errs[i] <- cv.glm(Wage, fit)$delta[1]
}
plot(1:degree, cv.errs, xlab = 'Degree', ylab = 'Test MSE', type = 'l')
deg.min <- which.min(cv.errs)
points(deg.min, cv.errs[deg.min], col = 'red', cex = 2, pch =
plot(wage ~ age, data = Wage, col = "darkgrey")
age.range <- range(Wage$age)
age.grid <- seq(from = age.range[1], to = age.range[2])
fit <- lm(wage ~ poly(age, 3), data = Wage)
preds <- predict(fit, newdata = list(age = age.grid))
lines(age.grid, preds, col = "red", lwd = 2)
plot(wage ~ age, data = Wage, col = "darkgrey"
age.range <- range(Wage$age)
age.grid <- seq(from = range(Wage$age)[1], to = range(Wage$age)[2],
length = 100)
plot(wage ~ age, data = Wage, xlim = c(min(age.grid), max(age.grid)),
xlab = "Age", ylab = "Wage", cex = 0.5, col = "darkgrey")
fit <- lm(wage ~ poly(age, 3), data = Wage)
preds <- predict(fit, newdata = list(age = age.grid))
lines(age.grid, preds, col = "red", lwd = 2)
age.grid <- seq(from = range(Wage$age)[1], to = range(Wage$age)[2],
length = 100)
plot(wage ~ age, data = Wage, xlim = c(min(age.grid), max(age.grid)),
xlab = "Age", ylab = "Wage", cex = 0.5, col = "darkgrey")
fit <- lm(wage ~ poly(age, 4), data = Wage)
preds <- predict(fit, newdata = list(age = age.grid))
lines(age.grid, preds, col = "red", lwd = 2)
plot(1:degree, cv.errs, xlab = 'Degree', ylab = 'Test MSE', type = 'l')
deg.min <- which.min(cv.errs)
points(deg.min, cv.errs[deg.min], col = 'red', cex = 2, pch = 19)
age.grid <- seq(from = range(Wage$age)[1], to = range(Wage$age)[2],
length = 100)
plot(wage ~ age, data = Wage, xlim = c(min(age.grid), max(age.grid)),
xlab = "Age", ylab = "Wage", cex = 0.5, col = "darkgrey")
fit <- lm(wage ~ poly(age, 4), data = Wage)
preds <- predict(fit, newdata = list(age = age.grid))
lines(age.grid, preds, col = "red", lwd = 2)
degree <- 10
cv.errs <- rep(NA, degree)
for (i in 1:degree) {
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errs[i] <- cv.glm(Wage, fit)$delta[1]
anova(fit)
}
table(cut(Wage$age, 4))
cut.fit <-  lm(wage ~ cut(age, 4), data = Wage)
coef(summary(cut.fit))
cv.errs <- rep(NA, degree)
for (i in 2:degree) {
Wage$age.cut <- cut(Wage$age, i)
fit <- glm(wage ~ age.cut, data = Wage)
cv.errs[i] <- cv.glm(Wage, fit)$delta[1]
}
plot(2:degree, cv.errs[-1], xlab = 'Cuts', ylab = 'Test MSE', type = 'l')
deg.min <- which.min(cv.errs)
points(deg.min, cv.errs[deg.min], col = 'red', cex = 2, pch = 19)
plot(wage ~ age, data = Wage, col = "darkgrey")
fit <- glm(wage ~ cut(age, 8), data = Wage)
preds <- predict(fit, list(age = age.grid))
lines(age.grid, preds, col = "red", lwd = 2)
knitr::opts_chunk$set(echo = TRUE)
piSeq <- seq(-pi, pi, length = 10)
piSeq
knitr::opts_chunk$set(echo = TRUE)
ggplot(strokeData, aes(x = age, y = bmi)) + geom_point(size = 0.65, color = "#2ed573") +
ylim(0, 65) + ggtitle("BMI vs. Age") + ylab("BMI") + xlab("Age")
rm(list = ls())
library(ggplot2)
library(caTools)
setwd("C:/Users/jspen/OneDrive\ -\ Clemson\ University/desktop/projects/strokeAnalysis/")
strokeData <- read.csv("data/healthcare-dataset-stroke-data.csv")
strokeData <- subset(strokeData, bmi != "N/A")
strokeData$bmi <- as.numeric(strokeData$bmi)
strokeData <- subset(strokeData, select = -c(id))
str(strokeData)
ggplot(strokeData, aes(x = age, y = bmi)) + geom_point(size = 0.65, color = "#2ed573") +
ylim(0, 65) + ggtitle("BMI vs. Age") + ylab("BMI") + xlab("Age")
ggplot(strokeData, aes(stroke, Residence_type, color = factor(stroke))) + geom_jitter() +
ggtitle("Residence Type and Stroke") + ylab("Residence Type") + xlab("Stroke") +
labs(color = "Stroke")
# 11) Age vs BMI with no Stroke separation and linear regression
ggplot(strokeData, aes(x = age, y = bmi)) + geom_point(size = 0.65, color = "#2ed573") +
ylim(0, 65) + geom_smooth(method = "lm", color = "#1e90ff")
# 11) Age vs BMI with no Stroke separation and linear regression
ggplot(strokeData, aes(x = age, y = bmi)) + geom_point(size = 0.65, color = "#2ed573") +
ylim(0, 65) + geom_smooth(method = "lm", color = "#1e90ff") + ggtitle("BMI vs. Age") +
ylab("BMI") + xlab("Age")
# 12) Age vs BMI with no Stroke separation and loess regression
ggplot(strokeData, aes(x = age, y = bmi)) + geom_point(size = 0.65, color = "#2ed573") +
ylim(0, 65) + geom_smooth(method = "loess", color = "#1e90ff") +
ggtitle("BMI vs. Age") + xlab("BMI") + ylab("Age")
ggplot(strokeData, aes(x = age, y = bmi, color = factor(stroke))) + geom_point(size = 0.65) +
ylim(0, 65) + ggtitle("BMI vs. Age") + ylab("BMI") + xlab("Age")
# 13) Age vs BMI with Stroke separation and no regression lines
ggplot(strokeData, aes(x = age, y = bmi, color = factor(stroke))) + geom_point(size = 0.65) +
ylim(0, 65) + ggtitle("BMI vs. Age") + ylab("BMI") + xlab("Age") +
labs(color = "Stroke")
# 14) Age vs BMI with Stroke separation and linear regression
ggplot(strokeData, aes(x = age, y = bmi, color = factor(stroke))) + geom_point(size = 0.65) +
ylim(0, 65) + geom_smooth(method = "lm") + ggtitle("BMI vs. Age") +
ylab("BMI") + xlab("Age") + labs(colro = "Stroke")
# 14) Age vs BMI with Stroke separation and linear regression
ggplot(strokeData, aes(x = age, y = bmi, color = factor(stroke))) + geom_point(size = 0.65) +
ylim(0, 65) + geom_smooth(method = "lm") + ggtitle("BMI vs. Age") +
ylab("BMI") + xlab("Age") + labs(color = "Stroke")
# 15) Age vs BMI with Stroke separation and loess regression
ggplot(strokeData, aes(x = age, y = bmi, color = factor(stroke))) + geom_point(size = 0.65) +
ylim(0, 65) + geom_smooth(method = "loess") + ggtitle("BMI vs. Age") +
ylab("BMI") + xlab("Age") + labs(color = "Stroke")
# 16) Stroke occurrences
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.75) +
scale_x_discrete()
# 16) Stroke occurrences
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.75) +
scale_x_discrete() + ggtitle("Stroke Occurences") + ylab("Counts") +
xlab("Stroke") + labs(color = "Stroke")
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.75) +
scale_x_discrete() + ggtitle("Stroke Occurences") + ylab("Counts") +
xlab("Stroke") + labs(color = "Stroke")
# 15) Age vs BMI with Stroke separation and loess regression
ggplot(strokeData, aes(x = age, y = bmi, color = factor(stroke))) + geom_point(size = 0.65) +
ylim(0, 65) + geom_smooth(method = "loess") + ggtitle("BMI vs. Age") +
ylab("BMI") + xlab("Age") + labs(color = "Stroke")
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.75) +
scale_x_discrete() + ggtitle("Stroke Occurences") + ylab("Counts") +
xlab("Stroke") + labs(color = "Stroke")
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.75) +
scale_x_discrete() + ggtitle("Stroke Occurences") + ylab("Counts") +
xlab("No Stroke              Stroke") + labs(color = "Stroke")
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.75) +
scale_x_discrete() + ggtitle("Stroke Occurences") + ylab("Counts") +
xlab("No Stroke                      Stroke") + labs(color = "Stroke")
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.75) +
scale_x_discrete() + ggtitle("Stroke Occurences") + ylab("Counts") +
xlab("No Stroke                                          Stroke") + labs(color = "Stroke")
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.75) +
scale_x_discrete() + ggtitle("Stroke Occurences") + ylab("Counts") +
xlab("Stroke Status") + labs(color = "Stroke")
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.75) +
scale_x_discrete() + ggtitle("Stroke Occurences") + ylab("Counts") +
xlab("Stroke Status") + labs(fill = "Stroke")
ggplot(strokeData, aes(stroke, color = factor(stroke))) + geom_bar(width = 0.75) +
scale_x_discrete() + ggtitle("Stroke Occurences") + ylab("Counts") +
xlab("Stroke Status") + labs(color = "Stroke")
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.75) +
scale_x_discrete() + ggtitle("Stroke Occurences") + ylab("Counts") +
xlab("Stroke Status") + labs(fil = "Stroke")
ggplot(strokeData, aes(x=avg_glucose_level, y=stroke, color = factor(hypertension))) +
geom_point() + geom_smooth(method="glm", se=FALSE, method.args = list(family=binomial))
ggPredict(glm.fit2, se = TRUE, digits = 3)
require(ggiraph)
ggPredict(glm.fit2, se = TRUE, digits = 3)
require(ggiraph)
require(ggiraphExtra)
require(plyr)
ggPredict(glm.fit2, se = TRUE, digits = 3)
split = sample.split(strokeData$stroke, SplitRatio = 0.5)
train = subset(strokeData, split == TRUE)
test = subset(strokeData, split == FALSE)
glm.fit <- glm(stroke ~ age + hypertension + heart_disease +
MARRIED + WORK + RESIDENCE + avg_glucose_level +
bmi + SMOKE, data = train, family = binomial)
summary(glm.fit)
glm.fit2 <- glm(stroke ~ avg_glucose_level * hypertension, data = train,
family = binomial)
summary(glm.fit2)
ggPredict(glm.fit2, se = TRUE, digits = 3)
ggPredict(glm.fit2, se = TRUE, digits = 3) + ggtitle("Probability of Stroke based
on")
ggPredict(glm.fit2, se = TRUE, digits = 1)
ggPredict(glm.fit2, se = TRUE, digits = 3)
ggPredict(glm.fit2, se = TRUE, digits = 3) +
ggtitle("Probability of Stroke") + ylab("Probability") + xlab("Average Glucose Level")
ggplot(strokeData, aes(x=avg_glucose_level, y=stroke, color = factor(hypertension))) +
geom_point() + geom_smooth(method="glm", se=FALSE, method.args = list(family=binomial)) +
ggtitle("Probability of Stroke")
ggplot(strokeData, aes(x=avg_glucose_level, y=stroke, color = factor(hypertension))) +
geom_point() + geom_smooth(method="glm", se=FALSE, method.args = list(family=binomial)) +
ggtitle("Probability of Stroke") + ylab("Probability") + xlab("Average Glucose Level")
ggplot(strokeData, aes(x=avg_glucose_level, y=stroke, color = factor(hypertension))) +
geom_point() + geom_smooth(method="glm", se=FALSE, method.args = list(family=binomial)) +
ggtitle("Probability of Stroke") + ylab("Probability") + xlab("Average Glucose Level") +
labs(color = "Hypertension")
ggplot(strokeData, aes(smoking_status, avg_glucose_level)) +
geom_boxplot(color = "#2ed573") + ggtitle("Average Glucose Level vs. Smoking Status") +
ylab("Average Glucose Level") + xlab("Smoking Status")
