attr(bs(Wage$age, df = 6), "knots")
fit2 = lm(wage ~ns(age, df = 4), data = Wage)
pred2 = predict(fit2, newdata = list(age = age.grid), se = TRUE)
lines(age.grid, pred2$fit, col = "red", lwd = 2)
plot(age, wage, xlim = agelims, cex 0.5, col = "darkgrey")
agelims = range(age)
agelims = range(wage$age)
agelims = range(Wage$age)
plot(age, wage, xlim = agelims, cex = 0.5, col = "darkgrey")
plot(Wage$age, data = wage, xlim = agelims, cex = 0.5, col = "darkgrey")
plot(wage ~ age, data = Wage, xlim = agelims, cex = 0.5, col = "darkgrey")
fit2 = lm(wage ~ns(age, df = 4), data = Wage)
pred2 = predict(fit2, newdata = list(age = age.grid), se = TRUE)
lines(age.grid, pred2$fit, col = "red", lwd = 2)
plot(wage ~ age, data = Wage, xlim = agelims, cex = 0.5, col = "darkgrey")
plot(wage ~ age, data = Wage, xlim = agelims, cex = 0.5, col = "darkgrey")
title("Smoothing Spline")
fit = smooth.spline(age, wage, df = 16)
fit = smooth.spline(age, data = Wage, df = 16)
fit = smooth.spline(age, Wage, df = 16)
fit = smooth.spline(Wage$age, Wage, df = 16)
fit = smooth.spline(age, wage, df = 16)
fit = smooth.spline(age, wage$wage, df = 16)
fit = smooth.spline(age, wage$wage, df = 16)
fit = smooth.spline(age, wage$Wage, df = 16)
fit = smooth.spline(age, dat = wage, df = 16)
fit = smooth.spline(age, data = wage, df = 16)
fit2$df
fit = smooth.spline(age, Wage$wage, df = 16)
fit = smooth.spline(Wage$age, Wage$wage, df = 16)
fit = smooth.spline(Wage$age, Wage$wage, df = 16)
fit2 = smooth.spline(Wage$age, Wage$wage, cv = TRUE)
fit2$df
plot(wage ~ age, data = Wage, xlim = agelims, cex = 0.5, col = "darkgrey")
title("Smoothing Spline")
fit = smooth.spline(Wage$age, Wage$wage, df = 16)
fit2 = smooth.spline(Wage$age, Wage$wage, cv = TRUE)
fit2$df
lines(fit, col = "red", lwd = 2)
lines(fit2, col = "blue", lwd = 2)
legend("topright", legend = c("16 DF", "6.8 DF"), col = c("red", "blue"),
lty = 1, lwd = 2, cex = 0.8)
plot(Wage$age, Wage$wage, xlim = agelims, cex = 0.5, col = "darkgrey")
title("Local Regression")
fit = loess(wage ~ wage, span = 0.2, data = Wage)
fit = loess(wage ~ age, span = 0.2, data = Wage)
plot(Wage$age, Wage$wage, xlim = agelims, cex = 0.5, col = "darkgrey")
title("Local Regression")
fit = loess(wage ~ age, span = 0.2, data = Wage)
fit2 = loess(wage ~ age, span = 0.5, data = Wage)
lines(age.grid, predict(fit, data.frame(age = age.grid)), col = "red", lwd = 2)
legend("topright", legend = c("Span = 0.2", "Span = 0.5"),
col = c("red", "blue"), lty = 1, lwd = 2, cex = 0.8)
cv.errors <- rep(NA, 10)
for(i in 1:10){
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errors[i] <- cv.glm(Wage, fit)$delta[1]
}
cv.errors <- rep(NA, 10)
for(i in 1:10){
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errors[i] <- cv.glm(Wage$wage, fit)$delta[1]
}
cv.errors <- rep(NA, 10)
for(i in 1:10){
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errors[i] <- cv.glm(wage, fit)$delta[1]
}
cv.errors <- rep(NA, 10)
for(i in 1:10){
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errors[i] <- cv.glm(wage, fit)$delta[1]
}
cv.errors <- rep(NA, 10)
for(i in 1:10){
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errors[i] <- cv.glm(wage, fit)$delta[1]
}
cv.errors <- rep(NA, 10)
for(i in 1:10){
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errors[i] <- cv.glm(wage, fit)$delta[1]
}
wage
Wage
Wage$wage
wage$Wage
rm(list = ls())
library(ISLR)
library(boot)
set.seed(1)
cv.errors <- rep(NA, 10)
for(i in 1:10){
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errors[i] <- cv.glm(wage, fit)$delta[1]
}
cv.errors <- rep(NA, 10)
for(i in 1:10){
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errors[i] <- cv.glm(Wage, fit)$delta[1]
}
plot(1:degree, cv.errors, xlab = "Degree", ylab = "Test MSE", type = "1")
deg.min <- which.min(cv.errors)
points(deg.min, cv.errors[deg.min], col = "blue", cex = 2, pch = 19)
plot(1:degree, cv.errors, xlab = 'degree', ylab = 'Test MSE', type = '1')
deg.min <- which.min(cv.errors)
points(deg.min, cv.errors[deg.min], col = "blue", cex = 2, pch = 19)
plot(1:degree, cv.errors, xlab = 'degree', ylab = 'Test MSE', type = 'l')
deg.min <- which.min(cv.errors)
points(deg.min, cv.errors[deg.min], col = "blue", cex = 2, pch = 19)
plot(1:degree, cv.errors, xlab = 'degree', ylab = 'Test MSE', type = 'l')
deg.min <- which.min(cv.errors)
points(deg.min, cv.errors[deg.min], col = "blue", cex = 2, pch = 19)
plot(1:degree, cv.errors, xlab = 'degree', ylab = 'Test MSE', type = 'l')
deg.min <- which.min(cv.errors)
points(deg.min, cv.errors[deg.min], col = "blue", cex = 2, pch = 19)
plot(1:degree, cv.errors, xlab = , ylab = 'Test MSE', type = '1')
deg.min <- which.min(cv.errors)
points(deg.min, cv.errors[deg.min], col = "blue", cex = 2, pch = 19)
rm(list = ls())
library(ISLR)
library(boot)
set.seed(1)
cv.errors <- rep(NA, 10)
for(i in 1:10){
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errors[i] <- cv.glm(Wage, fit)$delta[1]
}
plot(1:degree, cv.errors, xlab = , ylab = 'Test MSE', type = '1')
deg.min <- which.min(cv.errors)
points(deg.min, cv.errors[deg.min], col = "blue", cex = 2, pch = 19)
library(ISLR)
library(boot)
set.seed(1)
degree <- 10
cv.errs <- rep(NA, degree)
for (i in 1:degree) {
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errs[i] <- cv.glm(Wage, fit)$delta[1]
}
plot(1:degree, cv.errs, xlab = 'Degree', ylab = 'Test MSE', type = 'l')
deg.min <- which.min(cv.errs)
points(deg.min, cv.errs[deg.min], col = 'red', cex = 2, pch = 19)
rm(list = ls())
library(ISLR)
library(boot)
set.seed(1)
degree <- 10
cv.errs <- rep(NA, degree)
for (i in 1:degree) {
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errs[i] <- cv.glm(Wage, fit)$delta[1]
}
plot(1:degree, cv.errs, xlab = 'Degree', ylab = 'Test MSE', type = 'l')
deg.min <- which.min(cv.errs)
points(deg.min, cv.errs[deg.min], col = 'red', cex = 2, pch = 19)
library(ISLR)
library(boot)
plot(1:degree, cv.errs, xlab = 'Degree', ylab = 'Test MSE', type = 'l')
deg.min <- which.min(cv.errs)
points(deg.min, cv.errs[deg.min], col = 'red', cex = 2, pch = 19)
rm(list = ls())
library(ISLR)
library(boot)
set.seed(1)
degree <- 10
cv.errs <- rep(NA, degree)
for (i in 1:degree) {
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errs[i] <- cv.glm(Wage, fit)$delta[1]
}
plot(1:degree, cv.errs, xlab = 'Degree', ylab = 'Test MSE', type = 'l')
deg.min <- which.min(cv.errs)
points(deg.min, cv.errs[deg.min], col = 'red', cex = 2, pch =
plot(wage ~ age, data = Wage, col = "darkgrey")
age.range <- range(Wage$age)
age.grid <- seq(from = age.range[1], to = age.range[2])
fit <- lm(wage ~ poly(age, 3), data = Wage)
preds <- predict(fit, newdata = list(age = age.grid))
lines(age.grid, preds, col = "red", lwd = 2)
plot(wage ~ age, data = Wage, col = "darkgrey"
age.range <- range(Wage$age)
age.grid <- seq(from = range(Wage$age)[1], to = range(Wage$age)[2],
length = 100)
plot(wage ~ age, data = Wage, xlim = c(min(age.grid), max(age.grid)),
xlab = "Age", ylab = "Wage", cex = 0.5, col = "darkgrey")
fit <- lm(wage ~ poly(age, 3), data = Wage)
preds <- predict(fit, newdata = list(age = age.grid))
lines(age.grid, preds, col = "red", lwd = 2)
age.grid <- seq(from = range(Wage$age)[1], to = range(Wage$age)[2],
length = 100)
plot(wage ~ age, data = Wage, xlim = c(min(age.grid), max(age.grid)),
xlab = "Age", ylab = "Wage", cex = 0.5, col = "darkgrey")
fit <- lm(wage ~ poly(age, 4), data = Wage)
preds <- predict(fit, newdata = list(age = age.grid))
lines(age.grid, preds, col = "red", lwd = 2)
plot(1:degree, cv.errs, xlab = 'Degree', ylab = 'Test MSE', type = 'l')
deg.min <- which.min(cv.errs)
points(deg.min, cv.errs[deg.min], col = 'red', cex = 2, pch = 19)
age.grid <- seq(from = range(Wage$age)[1], to = range(Wage$age)[2],
length = 100)
plot(wage ~ age, data = Wage, xlim = c(min(age.grid), max(age.grid)),
xlab = "Age", ylab = "Wage", cex = 0.5, col = "darkgrey")
fit <- lm(wage ~ poly(age, 4), data = Wage)
preds <- predict(fit, newdata = list(age = age.grid))
lines(age.grid, preds, col = "red", lwd = 2)
degree <- 10
cv.errs <- rep(NA, degree)
for (i in 1:degree) {
fit <- glm(wage ~ poly(age, i), data = Wage)
cv.errs[i] <- cv.glm(Wage, fit)$delta[1]
anova(fit)
}
table(cut(Wage$age, 4))
cut.fit <-  lm(wage ~ cut(age, 4), data = Wage)
coef(summary(cut.fit))
cv.errs <- rep(NA, degree)
for (i in 2:degree) {
Wage$age.cut <- cut(Wage$age, i)
fit <- glm(wage ~ age.cut, data = Wage)
cv.errs[i] <- cv.glm(Wage, fit)$delta[1]
}
plot(2:degree, cv.errs[-1], xlab = 'Cuts', ylab = 'Test MSE', type = 'l')
deg.min <- which.min(cv.errs)
points(deg.min, cv.errs[deg.min], col = 'red', cex = 2, pch = 19)
plot(wage ~ age, data = Wage, col = "darkgrey")
fit <- glm(wage ~ cut(age, 8), data = Wage)
preds <- predict(fit, list(age = age.grid))
lines(age.grid, preds, col = "red", lwd = 2)
knitr::opts_chunk$set(echo = TRUE)
piSeq <- seq(-pi, pi, length = 10)
piSeq
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(ggplot2)
setwd("C:/Users/jspen/OneDrive\ -\ Clemson\ University/desktop/projects/strokeAnalysis/")
strokeData <- read.csv("data/healthcare-dataset-stroke-data.csv")
strokeData <- subset(strokeData, bmi != "N/A")
strokeData$bmi <- as.numeric(strokeData$bmi)
str(strokeData)
# Age vs BMI with Stroke separation and loess regression
ggplot(strokeData, aes(x = age, y = bmi, color = factor(stroke))) + geom_point(size = 0.65) +
ylim(0, 65) + geom_smooth(method = "loess")
View(strokeData)
ggplot(strokeData, aes(x = age, y = bmi, color = factor(work_type))) + geom_point(size = 0.65) +
ylim(0, 65) + geom_smooth(method = "loess")
ggplot(strokeData, aes(x = age, y = bmi, color = factor(smoking_status))) + geom_point(size = 0.65) +
ylim(0, 65) + geom_smooth(method = "loess")
ggplot(strokeData, aes(x = age, y = bmi, color = factor(smoking_status))) + geom_point(size = 0.65) +
ylim(0, 65)
# Age vs BMI with Stroke separation and loess regression
ggplot(strokeData, aes(x = age, y = bmi, color = factor(stroke))) + geom_point(size = 0.65) +
ylim(0, 65) + geom_smooth(method = "loess")
# Age vs BMI with no Stroke separation and no regression lines
ggplot(strokeData, aes(x = age, y = bmi)) + geom_point(size = 0.65, color = "#2ed573") +
ylim(0, 65)
# Age vs BMI with no Stroke separation and linear regression
ggplot(strokeData, aes(x = age, y = bmi)) + geom_point(size = 0.65, color = "#2ed573") +
ylim(0, 65) + geom_smooth(method = "lm", color = "#1e90ff")
# Age vs BMI with no Stroke separation and loess regression
ggplot(strokeData, aes(x = age, y = bmi)) + geom_point(size = 0.65, color = "#2ed573") +
ylim(0, 65) + geom_smooth(method = "loess", color = "#1e90ff")
split = sample.split(strokeData$Winner, SplitRatio = 0.7)
train = subset(strokeData, split == TRUE)
test = subset(strokeData, split == FALSE)
View(strokeData)
library(caret)
split = sample.split(strokeData$Winner, SplitRatio = 0.7)
library(caTools)
split = sample.split(strokeData$Winner, SplitRatio = 0.7)
train = subset(strokeData, split == TRUE)
test = subset(strokeData, split == FALSE)
split = sample.split(strokeData$Winner, SplitRatio = 0.7)
split = sample.split(strokeData$Winner, SpliteRatio = 0.7)
split = sample.split(strokeData$Winner, SplitRatio = 0.7)
split = sample.split(strokeData$Winner, SplitRatio = 2/3)
split = sample.split(strokeData$stroke, SplitRatio = 0.7)
train = subset(strokeData, split == TRUE)
test = subset(strokeData, split == FALSE)
glm.fit <- glm(stroke ~ ., data = train, family = binomial)
summary(glm.fit)
strokeData <- subset(strokeData, select = -c(id))
glm.fit <- glm(stroke ~ ., data = train, family = binomial)
summary(glm.fit)
split = sample.split(strokeData$stroke, SplitRatio = 0.7)
train = subset(strokeData, split == TRUE)
test = subset(strokeData, split == FALSE)
glm.fit <- glm(stroke ~ ., data = train, family = binomial)
summary(glm.fit)
glm.probs <- predict(glm.fit, type = "response")
glm.pred <- ifelse(glm.probs > 0.5, "Red", "Blue")
glm.pred <- ifelse(glm.probs > 0.5, "Stroke", "No Stroke")
table(glm.pred, strokeData$stroke)
glm.pred <- ifelse(glm.probs > 0.5, "Stroke", "No Stroke")
table(glm.pred, strokeData$stroke)
predictTrain <- predict(glm.fit, data = train, type = "response")
table(train$stroke, predictTrain > 0.5)
predictTest <- predict(glm.fit, newdata = test, type = "response")
table(test$stroke, predictTest > 0.5)
glm.fit <- glm(stroke ~ smoking_status, data = train, family = binomial)
summary(glm.fit)
glm.fit <- glm(stroke ~ work_type, data = train, family = binomial)
summary(glm.fit)
plot(data$stroke, data$work_type)
ggplot(strokeData, aes(x=work_type, y=stroke)) +
geom_point(alpha=.5, color = "#c0392b", size = 3, shape = 3) +
geom_smooth(color = "#3498db", size = 1, method="glm", se=FALSE,
method.args = list(family=binomial)) + xlim(0, 150) +
ggtitle("Probability of Winner") +
xlab("Red Fighter Average Total Strikes Landed") + ylab("Winner")
glm.fit <- glm(stroke ~ bmi, data = train, family = binomial)
summary(glm.fit)
predictTrain <- predict(glm.fit, data = train, type = "response")
table(train$stroke, predictTrain > 0.5)
predictTest <- predict(glm.fit, newdata = test, type = "response")
table(test$stroke, predictTest > 0.5)
ggplot(strokeData, aes(x=bmi, y=stroke)) +
geom_point(alpha=.5, color = "#c0392b", size = 3, shape = 3) +
geom_smooth(color = "#3498db", size = 1, method="glm", se=FALSE,
method.args = list(family=binomial)) + xlim(0, 150) +
ggtitle("Probability of Winner") +
xlab("Red Fighter Average Total Strikes Landed") + ylab("Winner")
ggplot(strokeData, aes(x=bmi, y=stroke)) +
geom_point(alpha=.5, color = "#c0392b", size = 3, shape = 3) +
geom_smooth(color = "#3498db", size = 1, method="glm", se=FALSE,
method.args = list(family=binomial))
ggplot(strokeData, aes(x=bmi, y=stroke)) + geom_point() + geom_smooth()
ggplot(strokeData, aes(x=bmi, y=stroke)) + geom_point() + geom_smooth(method.args = list(family=binomial))
ggplot(strokeData, aes(x=bmi, y=stroke)) + geom_point() + geom_smooth(method = "glm", method.args = list(family=binomial))
ggplot(strokeData, aes(x=bmi, y=stroke)) + geom_point() + geom_smooth(method="glm", se=FALSE, method.args = list(family=binomial))
glm.fit <- glm(stroke ~ bmi + age + avg_glucose_level, data = train, family = binomial)
summary(glm.fit)
ggplot(strokeData, aes(x=bmi + age + avg_glucose_level, y=stroke)) + geom_point() + geom_smooth(method="glm", se=FALSE, method.args = list(family=binomial))
predictTrain <- predict(glm.fit, data = train, type = "response")
table(train$stroke, predictTrain > 0.5)
glm.probs <- predict(glm.fit, type = "response")
glm.pred <- ifelse(glm.probs > 0.5, "Stroke", "No Stroke")
table(glm.pred, strokeData$stroke)
glm.probs <- predict(glm.fit, newdata = test, type = "response")
glm.pred <- ifelse(glm.probs > 0.5, "Stroke", "No Stroke")
table(glm.pred, strokeData$stroke)
table(glm.pred, glm.probs)
table(glm.pred, glm.probs > 0.5)
predictTrain <- predict(glm.fit, data = train, type = "response")
table(train$stroke, predictTrain > 0.5)
strokeData$ever_married <- as.factor(strokeData$ever_married)
strokeData$MARRIED <- as.numeric(strokeData$ever_married)
strokeData$WORK <- as.numeric(strokeData$work_type)
strokeData$work_type <- as.factor(strokeData$work_type)
strokeData$WORK <- as.numeric(strokeData$work_type)
strokeData$Residence_type <- as.factor(strokeData$Residence_type)
strokeData$RESIDENCE <- as.numeric(strokeData$Residence_type)
strokeData$smoking_status <- as.factor(strokeData$smoking_status)
strokeData$SMOKE <- as.numeric(strokeData$smoking_status)
glm.fit <- glm(stroke ~ age + hypertension + heart_disease +
MARRIED + WORK + RESIDENCE + avg_glucose_level +
bmi + SMOKE, data = train, family = binomial)
split = sample.split(strokeData$stroke, SplitRatio = 0.7)
train = subset(strokeData, split == TRUE)
test = subset(strokeData, split == FALSE)
glm.fit <- glm(stroke ~ age + hypertension + heart_disease +
MARRIED + WORK + RESIDENCE + avg_glucose_level +
bmi + SMOKE, data = train, family = binomial)
summary(glm.fit)
ggplot(strokeData, aes(x=age, y=stroke)) + geom_point() + geom_smooth(method="glm", se=FALSE, method.args = list(family=binomial))
ggplot(strokeData, aes(x=hypertension, y=stroke)) + geom_point() + geom_smooth(method="glm", se=FALSE, method.args = list(family=binomial))
predictTrain <- predict(glm.fit, data = train, type = "response")
table(train$stroke, predictTrain > 0.5)
predictTest <- predict(glm.fit, newdata = test, type = "response")
table(test$stroke, predictTest > 0.5)
split = sample.split(strokeData$stroke, SplitRatio = 0.2)
train = subset(strokeData, split == TRUE)
test = subset(strokeData, split == FALSE)
glm.fit <- glm(stroke ~ age + hypertension + heart_disease +
MARRIED + WORK + RESIDENCE + avg_glucose_level +
bmi + SMOKE, data = train, family = binomial)
summary(glm.fit)
predictTrain <- predict(glm.fit, data = train, type = "response")
table(train$stroke, predictTrain > 0.5)
predictTest <- predict(glm.fit, newdata = test, type = "response")
table(test$stroke, predictTest > 0.5)
split = sample.split(strokeData$stroke, SplitRatio = 0.5)
train = subset(strokeData, split == TRUE)
test = subset(strokeData, split == FALSE)
predictTrain <- predict(glm.fit, data = train, type = "response")
table(train$stroke, predictTrain > 0.5)
glm.fit <- glm(stroke ~ age + hypertension + heart_disease +
MARRIED + WORK + RESIDENCE + avg_glucose_level +
bmi + SMOKE, data = train, family = binomial)
summary(glm.fit)
predictTrain <- predict(glm.fit, data = train, type = "response")
table(train$stroke, predictTrain > 0.5)
predictTest <- predict(glm.fit, newdata = test, type = "response")
table(test$stroke, predictTest > 0.5)
ggPredict(glm.fit, se = TRUE, interactive = TRUE, digits = 3)
install.packages("devtools")
devtools::install_github('cardiomoon/ggiraphExtra')
require(ggiraph)
require(ggiraphExtra)
require(plyr)
ggPredict(glm.fit, se = TRUE, interactive = TRUE, digits = 3)
summary(glm.fit)
split = sample.split(strokeData$stroke, SplitRatio = 0.7)
train = subset(strokeData, split == TRUE)
test = subset(strokeData, split == FALSE)
glm.fit <- glm(stroke ~ age + hypertension + heart_disease +
MARRIED + WORK + RESIDENCE + avg_glucose_level +
bmi + SMOKE, data = train, family = binomial)
summary(glm.fit)
glm.fit <- glm(stroke ~ age + hypertension + avg_glucose_level, data = train,
family = binomial)
summary(glm.fit)
ggPredict(glm.fit, se = TRUE, interactive = TRUE, digits = 3)
ggPredict(glm.fit, se = TRUE, interactive = TRUE)
ggPredict(glm.fit, se = TRUE, interactive = TRUE)
ggPredict(glm.fit, se = TRUE)
glm.fit <- glm(stroke ~ avg_glucose_level, data = train,
family = binomial)
summary(glm.fit)
ggplot(strokeData, aes(x=avg_glucose_level, y=stroke)) + geom_point() + geom_smooth(method="glm", se=FALSE, method.args = list(family=binomial))
ggplot(strokeData, aes(x=avg_glucose_level, y=stroke, color = factor(stroke))) + geom_point() + geom_smooth(method="glm", se=FALSE, method.args = list(family=binomial))
ggplot(strokeData, aes(x=avg_glucose_level, y=stroke, color = factor(stroke))) +
geom_point() + geom_smooth(method="glm", se=FALSE, method.args = list(family=binomial))
ggplot(strokeData, aes(x=avg_glucose_level, y=stroke)) +
geom_point() + geom_smooth(method="glm", se=FALSE, method.args = list(family=binomial))
ggplot(strokeData, aes(x=avg_glucose_level, y=stroke)) +
geom_point(color = factor(stroke)) + geom_smooth(method="glm", se=FALSE, method.args = list(family=binomial))
ggplot(strokeData, aes(x=avg_glucose_level, y=stroke)) +
geom_point(color = factor(strokeData$stroke)) + geom_smooth(method="glm", se=FALSE, method.args = list(family=binomial))
ggplot(strokeData, aes(x=avg_glucose_level, y=stroke)) +
geom_point() + geom_smooth(method="glm", se=FALSE, method.args = list(family=binomial))
ggPredict(glm.fit, se = TRUE)
ggPredict(glm.fit, se = TRUE, digits = 3)
ggPredict(glm.fit, se = TRUE, digits = 3)
glm.fit <- glm(stroke ~ avg_glucose_level * hypertension, data = train,
family = binomial)
summary(glm.fit)
ggPredict(glm.fit, se = TRUE, digits = 3)
ggplot(strokeData, aes(x=avg_glucose_level, y=stroke, color = factor(stroke))) +
geom_point() + geom_smooth(method="glm", se=FALSE, method.args = list(family=binomial))
ggplot(strokeData, aes(x=avg_glucose_level, y=stroke, color = factor(hypertension))) +
geom_point() + geom_smooth(method="glm", se=FALSE, method.args = list(family=binomial))
glm.fit <- glm(stroke ~ age + hypertension + heart_disease +
MARRIED + WORK + RESIDENCE + avg_glucose_level +
bmi + SMOKE, data = train, family = binomial)
summary(glm.fit)
predictTrain <- predict(glm.fit, data = train, type = "response")
table(train$stroke, predictTrain > 0.5)
predictTest <- predict(glm.fit, newdata = test, type = "response")
table(test$stroke, predictTest > 0.5)
glm.fit2 <- glm(stroke ~ avg_glucose_level * hypertension, data = train,
family = binomial)
summary(glm.fit2)
ggPredict(glm.fit2, se = TRUE, digits = 3)
ggplot(strokeData, aes(x=avg_glucose_level, y=stroke, color = factor(hypertension))) +
geom_point() + geom_smooth(method="glm", se=FALSE, method.args = list(family=binomial))
predictTrain <- predict(glm.fit, data = train, type = "response")
table(train$stroke, predictTrain > 0.5)
predictTest <- predict(glm.fit, newdata = test, type = "response")
table(test$stroke, predictTest > 0.5)
(3290 + 0) / (3290 + 0 + 0 + 146)
(1410 + 1) /(1410 + 0 + 62 + 1)
split = sample.split(strokeData$stroke, SplitRatio = 0.5)
train = subset(strokeData, split == TRUE)
test = subset(strokeData, split == FALSE)
glm.fit <- glm(stroke ~ age + hypertension + heart_disease +
MARRIED + WORK + RESIDENCE + avg_glucose_level +
bmi + SMOKE, data = train, family = binomial)
summary(glm.fit)
predictTrain <- predict(glm.fit, data = train, type = "response")
table(train$stroke, predictTrain > 0.5)
(2348 + 3) / (2348 + 2 + 101 + 3)
predictTest <- predict(glm.fit, newdata = test, type = "response")
table(test$stroke, predictTest > 0.5)
(2348 + 2) /(2348 + 2 + 103 + 2)
# Training Set Accuracy - Fit 2
predictTrain <- predict(glm.fit2, data = train, type = "response")
table(train$stroke, predictTrain > 0.5)
(2348 + 3) / (2348 + 2 + 101 + 3)
glm.fit2 <- glm(stroke ~ avg_glucose_level * hypertension, data = train,
family = binomial)
summary(glm.fit2)
# Training Set Accuracy - Fit 2
predictTrain <- predict(glm.fit2, data = train, type = "response")
table(train$stroke, predictTrain > 0.5)
(2348 + 3) / (2348 + 2 + 101 + 3)
(2350 + 0) / (2350 + 0 + 104 + 0)
predictTest <- predict(glm.fit2, newdata = test, type = "response")
table(test$stroke, predictTest > 0.5)
(2350 + 0) /(2348 + 0 + 105 + 0)
ggplot(strokeData, aes(stroke)) + geom_bar()
ggplot(strokeData, aes(stroke, color = factor(stroke))) + geom_bar()
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar()
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 1)
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.1)
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.1) +
scale_y_discrete()
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.1) +
scale_x_discrete()
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.5) +
scale_x_discrete()
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.5) +
scale_x_continuous()
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.25) +
scale_x_continuous()
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.25) +
scale_x_discrete()
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.5) +
scale_x_discrete()
ggplot(strokeData, aes(stroke, fill = factor(stroke))) + geom_bar(width = 0.75) +
scale_x_discrete()
strokeData$stroke
